jt: [ruby, tool/jt.rb]

common-base: {
  downloads : {
    JAVA_HOME : {name : oraclejdk, version : "8u60", platformspecific: true}
    MAVEN_HOME : {name : maven, version : "3.3.9"}
  }

  environment: {
    CI: "true",
    JAVA_OPTS: -Xmx2G
    PATH: "$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH"
  }

  setup: [
    ["echo", "-n", "TRUFFLE_RUBY_VERSION=", ">setup-ci-env"],
    ["git", "rev-parse", "HEAD", ">>setup-ci-env"],
    ["export", ["<setup-ci-env"]]
    [mx, build, --force-javac]
  ]

  timelimit: "01:00:00"
}

common: ${common-base} {
  packages: {
    git:        ">=1.8.3"
    mercurial:  ">=3.2.4"
    ruby:       ">=2.1.0"
  }
}

common-darwin: ${common-base} {
  packages: {
    # Homebrew doesn't support versions.
    mercurial:  ""
  }
}

no-graal: {
  environment: {
    HOST_VM: server,
    HOST_VM_CONFIG: default,
    MX_NO_GRAAL: "true"
  }
}

labsjdk8: {
  downloads: {
    JAVA_HOME: {
      name: labsjdk,
      version: "8u121-jvmci-0.25",
      platformspecific: true
    }
  }
}

labsjdk9: {
  downloads: {
    JAVA9_HOME: {
      name: labsjdk,
      version: "9-ea+152",
      platformspecific: true
    }
  }
}

// Allow a version mismatch with truffle to prefer the language truffle version
mx_sclone: [mx, --version-conflict-resolution, ignore, sclone, --kind, git]

graal-core: ${labsjdk8} {
  setup: ${common.setup} [
    ${mx_sclone} ["https://github.com/graalvm/graal-core.git", ../graal-core],
    [cd, ../graal-core],
    [mx, sversions],
    [mx, build],
    [cd, ../main]
  ]

  environment: {
    GRAAL_HOME: ../graal-core,
    HOST_VM: server,
    HOST_VM_CONFIG: graal-core
  }
}

graal-enterprise: ${labsjdk8} {
  setup: ${common.setup} [
    ${mx_sclone} ["https://github.com/graalvm/graal-enterprise.git", ../graal-enterprise],
    [cd, ../graal-enterprise/graal-enterprise],
    [mx, sversions],
    [mx, build],
    [cd, ../../main]
  ]

  environment: {
    GRAAL_HOME: "$PWD/../graal-enterprise/graal-enterprise",
    HOST_VM: server,
    HOST_VM_CONFIG: graal-enterprise
  }
}

graal-enterprise-no-om: {
  downloads: ${graal-enterprise.downloads}
  setup: ${graal-enterprise.setup}

  environment: {
    GRAAL_HOME: "$PWD/../graal-enterprise/graal-enterprise",
    HOST_VM: server,
    HOST_VM_CONFIG: graal-enterprise-no-om,
    JAVA_OPTS: "-Dtruffle.object.LayoutFactory=com.oracle.truffle.object.basic.DefaultLayoutFactory"
  }
}

sulong: ${labsjdk8} {
  packages: {
    llvm: "==3.8"
  }

  downloads: {
    LIBGMP: {
      name: libgmp,
      version: "6.1.0",
      platformspecific: true
    }
  }

  environment: {
    CPPFLAGS: "-I$LIBGMP/include",
    LD_LIBRARY_PATH: "$LIBGMP/lib:$LLVM/lib:$LD_LIBRARY_PATH",
    PATH: "$LLVM/bin:$PATH",
    SULONG_VERSION: "3.8",
    GRAAL_HOME: "$PWD/../sulong",
    SULONG_HOME: "$PWD/../sulong",
    SULONG_NO_LIBRARY: "true",
    LIBXML_LIB: "/usr/lib64/libxml2.so.2",
    OPENSSL_LIB: "/usr/lib64/libssl.so.10",
    HOST_VM: server,
    HOST_VM_CONFIG: graal-core
  }

  setup: ${common.setup} [
    ${mx_sclone} ["https://github.com/graalvm/sulong.git", ../sulong],
    [cd, ../sulong],
    [mx, sforceimports], # Use Sulong's Truffle for now
    [mx, sversions],
    [mx, build],
    [cd, ../main],
    ${jt} [build, cexts],
    [mx, build], # copy compiled libraries to RUBY-ZIP
  ]
}

graal-vm-snapshot: {
  downloads: {
    GRAALVM_DIR: {
      name: graalvm-snapshot,
      version: latest,
      platformspecific: true
    }
  }

  environment: {
    GRAALVM_BIN: "$GRAALVM_DIR/bin/java"
    HOST_VM: server,
    HOST_VM_CONFIG: graal-vm-snap
  }
}

mri-benchmark: {
  environment: {
    HOST_VM: mri,
    HOST_VM_CONFIG: default
    GUEST_VM: mri,
    GUEST_VM_CONFIG: default,
    JT_BENCHMARK_RUBY: ruby
  }
}

truffleruby: {
  environment: {
    GUEST_VM: jruby,
    GUEST_VM_CONFIG: truffle,
  }
}

truffleruby-cexts: {
  environment: {
    GUEST_VM: jruby,
    GUEST_VM_CONFIG: truffle-cexts,
  }
}

gate-caps: {
  capabilities: [linux, amd64]
  targets: [gate, post-push]
}

gate-caps-darwin: {
  capabilities: [darwin, amd64]
  targets: [gate, post-push]
}

gate-caps-solaris: {
  capabilities: [solaris, sparcv9]
  targets: [gate, post-push]
}

daily-gate-caps: {
  capabilities: [linux, amd64]
  targets: [gate, post-push, daily]
}

bench-caps: {
  capabilities: [x52, linux, amd64, no_frequency_scaling]
  targets: [bench, post-push]
  timelimit: "02:00:00"
}

daily-caps: {
  capabilities: [linux, amd64]
  targets: [daily]
}

daily-bench-caps: {
  capabilities: [x52, linux, amd64, no_frequency_scaling]
  targets: [bench, daily]
  timelimit: "02:00:00"
}

daily-bench-caps-solaris: ${daily-bench-caps} {
  capabilities: [m7_eighth, solaris]
}

weekly-bench-caps: {
  capabilities: [x52, linux, amd64, no_frequency_scaling]
  targets: [weekly]
  timelimit: "02:00:00"
}

bench: {
  cmd: [mx, --dynamicimport, ruby-benchmarks, benchmark]
  setup: [
    ${mx_sclone} ["https://github.com/jruby/all-ruby-benchmarks.git", ../ruby-benchmarks]
  ]
}

post-process-and-upload-results-wait: [
  [tool/post-process-results-json.rb, bench-results.json, bench-results-processed.json],
  [cat, bench-results-processed.json],
  [bench-uploader.py, bench-results-processed.json],
  [tool/fail-if-any-failed.rb, bench-results-processed.json, --wait]
]

post-process-and-upload-results: [
  [tool/post-process-results-json.rb, bench-results.json, bench-results-processed.json],
  [cat, bench-results-processed.json],
  [bench-uploader.py, bench-results-processed.json],
  [tool/fail-if-any-failed.rb, bench-results-processed.json]
]

metrics: {
  run: ${bench.setup} [
    ${bench.cmd} [allocation]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [minheap]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [time]
  ] ${post-process-and-upload-results}
  timelimit: "00:25:00"
}

compiler-metrics: {
  run: ${bench.setup} [
    ${bench.cmd} ["allocation:compile-mandelbrot"]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} ["minheap:compile-mandelbrot"]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} ["time:compile-mandelbrot"]
  ] ${post-process-and-upload-results}
  timelimit: "00:50:00"
}

svm-build-stats: {
  run: ${bench.setup} [
    ${bench.cmd} ["build-stats"]
  ] ${post-process-and-upload-results-wait}
}

svm-metrics: {
  run: ${bench.setup} [
    ${bench.cmd} [instructions]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [time, --, --aot]
  ] ${post-process-and-upload-results}
  timelimit: "00:25:00"
}

classic-benchmarks: {
  run: ${bench.setup} [
    ${bench.cmd} [classic]
  ] ${post-process-and-upload-results}
  timelimit: "00:35:00"
}

classic-benchmarks-solaris: ${classic-benchmarks} {
  timelimit: "01:10:00"
}

chunky-benchmarks: {
  run: ${bench.setup} [
    ${bench.cmd} [chunky]
  ] ${post-process-and-upload-results}
  timelimit: "01:00:00"
}

psd-benchmarks: {
  run: ${bench.setup} [
    ${bench.cmd} [psd]
  ] ${post-process-and-upload-results}
  timelimit: "02:00:00"
}

asciidoctor-benchmarks: {
  run: ${bench.setup} [
    ${bench.cmd} [asciidoctor]
  ] ${post-process-and-upload-results}
  timelimit: "00:35:00"
}

other-benchmarks: {
  run: ${bench.setup} [
    ${bench.cmd} [image-demo]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [optcarrot]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [savina]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [synthetic]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [micro]
  ] ${post-process-and-upload-results}
  timelimit: "00:40:00"
}

other-benchmarks-svm: {
  run: ${bench.setup} [
    ${bench.cmd} [image-demo]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [optcarrot]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [savina]
  ] ${post-process-and-upload-results-wait} [
    ${bench.cmd} [synthetic]
  ] ${post-process-and-upload-results-wait}
  timelimit: "00:40:00"
}

optcarrot-warmup: {
  run: ${bench.setup} [
    ${jt} [benchmark, --stable, --elapsed, --time, "300", ../ruby-benchmarks/optcarrot/optcarrot.rb]
  ]
  timelimit: "00:40:00"
}

server-benchmarks: {
  packages: {
    "apache/ab": ">=2.3"
  }

  run: ${bench.setup} [
    ${bench.cmd} [server]
  ] ${post-process-and-upload-results}
  timelimit: "00:20:00"
}

cext-benchmarks: ${sulong} {
  environment: {
    TRUFFLERUBYOPT: "-Xcexts.log.load=true",
    USE_CEXTS: "true"
  }

  setup: ${sulong.setup} ${gem-test-pack.setup} ${bench.setup} [
    ${jt} [cextc, ../ruby-benchmarks/chunky_png/oily_png],
    ${jt} [cextc, ../ruby-benchmarks/psd.rb/psd_native]
  ]

  run: [
    ${bench.cmd} [chunky]
  ] ${post-process-and-upload-results}
  timelimit: "02:00:00"
}

gem-test-pack: {
  environment: {
    GEM_HOME: "$PWD/../jruby-truffle-gem-test-pack/gems"
  }

  setup: [
    [mx, sclone, --kind, git, "https://github.com/jruby/jruby-truffle-gem-test-pack.git", ../jruby-truffle-gem-test-pack],
    [test/truffle/gem-test-pack-checkout-revision.sh]
  ]
}

test-gems: ${gem-test-pack} {
  setup: ${common.setup} ${gem-test-pack.setup}

  run: [
    ${jt} [test, gems]
  ]
}

test-ecosystem: ${gem-test-pack} {
  setup: ${common.setup} ${gem-test-pack.setup}

  run: [
    ${jt} [test, ecosystem]
  ]
}

test-cexts: ${sulong} ${gem-test-pack} {
  environment: {
    JAVA_OPTS: "-Dgraal.TruffleCompileOnly=nothing",
  }

  setup: ${sulong.setup} ${gem-test-pack.setup}

  run: [
    ${jt} [test, specs, --sulong, ":capi"],
    ${jt} [test, cexts]
  ]
}

test-compilation-flags: {
  environment: {
    JAVA_OPTS: "-Dgraal.TraceTruffleCompilation=true -Dgraal.TruffleCompilationExceptionsAreFatal=true"
  }
}

deploy-binaries: {
  run: [
    [mx, deploy-binary-if-truffle-head, jruby-binary-snapshots]
  ]
  timelimit: "30:00"
}

// run-bench: ${jt} [ruby, --graal, bench/bench_array_conc_write_reads_ops.rb]
run-bench: [./monte_carlo_pi]

custom-bench: {
  run: [
    [lscpu],
    [cc, -std=gnu99, -O3, bench/monte_carlo_pi.c, -pthread, -lrt, -o, monte_carlo_pi]
    ${run-bench} ["1"],
    ${run-bench} ["2"],
    ${run-bench} ["4"],
    ${run-bench} ["8"],
    ${run-bench} ["16"],
    ${run-bench} ["32"],
    ${run-bench} ["48"],
    ${run-bench} ["64"],
  ]
}

builds: [
  {name: bench-shared-arrays} ${common} ${graal-core} ${bench-caps} ${deploy-binaries} ${truffleruby} ${custom-bench}
]

// Disable overlays
overlay: "6f4eafb4da3b14be3593b07ed562d12caad9b64b"
